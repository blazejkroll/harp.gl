/*
 * Copyright (C) 2017-2019 HERE Europe B.V.
 * Licensed under Apache 2.0, see full license in LICENSE
 * SPDX-License-Identifier: Apache-2.0
 */
import {
    DecodedTile,
    GeometryType,
    Technique,
    TextPathGeometry
} from "@here/harp-datasource-protocol";
import { GeoBox, TileKey } from "@here/harp-geoutils";
import { GroupedPriorityList } from "@here/harp-utils";
import * as THREE from "three";

import { CopyrightInfo } from "./CopyrightInfo";
import { DataSource } from "./DataSource";
import { TextElement } from "./text/TextElement";

export type TileObject = THREE.Object3D & {
    /**
     * Distance of this object from the [[Tile]]'s center.
     */
    displacement?: THREE.Vector3;
};

/**
 * An interface for optional feature data that is saved in a `THREE.Object3D`'s `userData`
 * property.
 */
export interface TileFeatureData {
    /**
     * The original type of geometry.
     */
    geometryType?: GeometryType;

    /**
     * An optional array of feature IDs.
     */
    ids?: Array<number | undefined>;

    /**
     * An optional array of indices into geometry where the feature starts. The lists of IDs
     * and starting indices (starts) must have the same size.
     */
    starts?: number[];

    /**
     * An optional object containing properties defined by the developer. It has the same size as
     * the list of IDs and the starting indices (starts).
     */
    objInfos?: Array<{} | undefined>;
}

/**
 * Contains data that describes the road on a [[ITile]]. The `RoadIntersectionData` is generated by
 * the [[RoadPicker]] class.
 *
 * @see [[RoadPicker]]
 */
export interface RoadIntersectionData {
    /**
     * Optional array of feature IDs.
     */
    ids: Array<number | undefined>;

    /**
     * An array of indices into the technique catalog. The lists of `techniqueIndex` and `starts`
     * have the same size.
     */
    techniqueIndex: number[];

    /**
     * An array of the indices into geometry where the feature starts. The lists of IDs and
     * starting indices (starts) have the same size.
     */
    starts: number[];

    /**
     * An array of widths of the roads. The lists of IDs and widths have the same size.
     */
    widths: number[];

    /**
     * An array of 2D numbers that make up the road geometry.
     */
    positions: number[];

    /**
     * A catalog of [[Technique]]s for road lines. Allows to reconstruct the visual appearance of
     * the identified line.
     */
    techniques: Technique[];
    /**
     * An optional object that contains properties defined by the developer. This object has the
     * same size as the list of IDs and the starts.
     */
    objInfos?: Array<{} | undefined>;
}

/**
 * Missing Typedoc
 */
export enum TileLoaderState {
    Initialized,
    Loading,
    Loaded,
    Decoding,
    Ready,
    Canceled,
    Failed,
    Disposed
}

export interface ITileLoader {
    state: TileLoaderState;
    payload?: ArrayBufferLike | {};
    decodedTile?: DecodedTile;

    isFinished: boolean;

    loadAndDecode(): Promise<TileLoaderState>;
    waitSettled(): Promise<TileLoaderState>;

    updatePriority(area: number): void;

    cancel(): void;
    dispose(): void;
}

/**
 * An object that contains information about resources used by a tile.
 */
export interface TileResourceUsageInfo {
    /**
     * The estimated memory usage, in bytes.
     */
    estimatedMemoryUsage: number;
    /**
     * The amount of vertices used by a tile.
     */
    numVertices: number;
    /**
     * The amount of colors used by a tile.
     */
    numColors: number;
    /**
     * The amount of objects used by a tile.
     */
    numObjects: number;
    /**
     * The amount of geometries used by a tile.
     */
    numGeometries: number;
    /**
     * The amount of materials used by a tile.
     */
    numMaterials: number;
}

export interface ITile {
    /**
     * The bounding box of this [[ITile]] in geocoordinates.
     */
    readonly geoBox: GeoBox;

    /**
     * The bounding box of this [[ITile]] in world coordinates.
     */
    readonly boundingBox: THREE.Box3;

    /**
     * The center of this [[ITile]] in world coordinates.
     */
    readonly center: THREE.Vector3;

    /**
     * Get the currently visible [[TextElement]]s of this [[ITile]]. This list is continuously
     * modified, and is not designed to be used to store developer-defined [[TextElements]].
     */
    readonly placedTextElements: GroupedPriorityList<TextElement>;

    /*
     * The size of this Tile in system memory.
     */
    readonly memoryUsage: number;

    /**
     * Detailed information about objects used by this Tile.
     */
    readonly usageStatistics: TileResourceUsageInfo;

    /**
     * Gets the list of developer-defined [[TextElement]] in this [[ITile]]. This list is always
     * rendered first.
     */
    readonly userTextElements: TextElement[];

    /**
     * Returns the longitudinal offset of this tile, note this is used to multiple the longitude by
     * 360 Degrees / 2Pi radians.
     */
    readonly offset: number;

    /**
     * Whether the [[ITile]] is a proxy or not (i.e. it proxies another tile for performance
     * reasons).
     */
    readonly isProxy: boolean;

    /**
     * Gets the current [[GroupedPriorityList]] which contains a list of all [[TextElement]]s to be
     * selected and placed for rendering.
     */
    readonly textElementGroups: GroupedPriorityList<TextElement>;

    /**
     * Returns `true` if this [[ITile]] has been disposed.
     */
    readonly disposed: boolean;

    /**
     * MapView checks if this [[ITile]] is ready to be rendered while culling.
     *
     * By default, MapView checks if the [[objects]] list is not empty. However, you can override
     * this check by manually setting this property.
     */
    readonly hasGeometry: boolean;

    /**
     * Where the data for this tile comes from.
     */
    readonly dataSource: DataSource;

    /**
     * Which location and storage level this tile represents
     */
    readonly tileKey: TileKey;

    /**
     * The decoded tile is set by [[TileLoader]] when data for the geometry is available; it is
     * removed after geometry handling.
     */
    readonly decodedTile: DecodedTile | undefined;

    /**
     * A record of road data that cannot be intersected with THREE.JS, because the geometry is
     * created in the vertex shader.
     */
    readonly roadIntersectionData?: RoadIntersectionData;

    /**
     * Keeping some stats for the individual [[ITile]]s to analyze caching behavior.
     *
     * The frame the [[ITile]] was requested.
     */
    readonly frameNumRequested: number;

    /**
     * Gets the [[ITileLoader]] that manages this tile.
     */
    readonly tileLoader: ITileLoader | undefined;

    /**
     * Copyright information of this [[ITile]]'s data.
     */
    copyrightInfo?: CopyrightInfo[];

    /**
     * Gets the current modification state for the list of [[TextElement]]s in the [[ITile]]. If the
     * value is `true` the TextElement is placed for rendering during the next frame.
     */
    textElementsChanged: boolean;

    /**
     * Integer specifying which geometry version this tile has. This is incremented once the
     * [[createGeometries]] method has finished. It is used to help know when the internal geometry
     * has changed. We use a number instead of a boolean flag because it is possible that the
     * decoded tile is set again or the data is [[reaload]]ed.
     */
    geometryVersion: number;

    /**
     * A list of the THREE.js objects stored in this [[ITile]].
     */
    objects: TileObject[];

    /**
     * The frame the [[ITile]] was first visible.
     */
    frameNumVisible: number;

    /**
     * The last frame this [[ITile]] has been rendered& (or was in the visible set). Used to
     * determine visibility of [[ITile]] at the end of a frame, if the number is the current frame
     * number, it is visible.
     */
    frameNumLastVisible: number;

    /**
     * After removing from cache, this is the number of frames the [[ITile]] was visible.
     */
    numFramesVisible: number;

    /**
     * The visibility status of the [[ITile]]. It is actually visible or planned to become visible,
     * and as such it should not be removed from cache.
     */
    isVisible: boolean;

    /**
     * Estimated visible area of tile used for sorting the priorities during loading.
     */
    visibleArea: number;

    /**
     * Adds a developer-defined [[TextElement]] to this [[ITile]]. The [[TextElement]] is always
     * visible, if it's in the map's currently visible area.
     *
     * @param textElement The Text element to add.
     */
    addUserTextElement(textElement: TextElement): void;

    /**
     * Removes a developer-defined [[TextElement]] from this [[ITile]].
     *
     * @param textElement A developer-defined TextElement to remove.
     * @returns `true` if the element has been removed successfully; `false` otherwise.
     */
    removeUserTextElement(textElement: TextElement): boolean;

    /**
     * Adds a [[TextElement]] to this [[ITile]], which is added to the visible set of
     * [[TextElement]]s based on the capacity and visibility. The [[TextElement]]'s priority
     * controls if or when it becomes visible.
     *
     * To ensure that a TextElement is visible, use a high value for its priority, such as
     * `Number.MAX_SAFE_INTEGER`. Since the number of visible TextElements is limited by the
     * screen space, not all TextElements are visible at all times.
     *
     * @param textElement The TextElement to add.
     */
    addTextElement(textElement: TextElement): void;

    /**
     * Removes a [[TextElement]] from this [[ITile]]. For the element to be removed successfully,
     * the priority of the [[TextElement]] has to be equal to its priority when it was added.
     *
     * @param textElement The TextElement to remove.
     * @returns `true` if the TextElement has been removed successfully; `false` otherwise.
     */
    removeTextElement(textElement: TextElement): boolean;

    /**
     * Called by [[VisibleTileSet]] to mark that [[Tile]] is visible and it should prepare geometry.
     */
    prepareForRender(): void;

    /**
     * Called before [[MapView]] starts rendering this [[ITile]].
     *
     * @param zoomLevel The current zoom level.
     * @returns Returns `true` if this [[ITile]] should be rendered.
     */
    willRender(_zoomLevel: number): boolean;

    /**
     * Called after [[MapView]] has rendered this [[ITile]].
     */
    didRender(): void;

    /**
     * Called when the default implementation of [[dispose()]] needs
     * to free the geometry of a [[Tile]] object.
     *
     * @param object The object that references the geometry.
     * @returns [[true]] if the geometry can be disposed.
     */
    // tslint:disable-next-line:no-unused-variable
    shouldDisposeObjectGeometry(object: TileObject): boolean;

    /**
     * Called when the default implementation of `dispose()` needs
     * to free a [[ITile]] object's material.
     *
     * @param object The object referencing the geometry.
     * @returns `true` if the material can be disposed.
     */
    // tslint:disable-next-line:no-unused-variable
    shouldDisposeObjectMaterial(object: TileObject): boolean;

    /**
     * Overrides the default value for [[hasGeometry]].
     *
     * @param value A new value for the [[hasGeometry]] flag.
     */
    forceHasGeometry(value: boolean): void;

    /**
     * Forces the update of this [[ITile]] geometry.
     */
    reload(): void;

    /**
     * Disposes this [[ITile]], freeing all geometries and materials for the reachable objects.
     */
    dispose(): void;

    /**
     * Splits the text paths that contain sharp corners.
     *
     * @param textPathGeometries The original path geometries that may have defects.
     */
    prepareTextPaths(textPathGeometries: TextPathGeometry[]): TextPathGeometry[];

    /**
     * Creates [[TextElement]] objects from the decoded tile and list of materials specified. The
     * priorities of the [[TextElement]]s are updated to simplify label placement.
     *
     * @param decodedTile The [[DecodedTile]].
     */
    createTextElements(decodedTile: DecodedTile): void;
}
